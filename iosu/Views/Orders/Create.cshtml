@model iosu.Models.OrderRequestModel

@{
    ViewBag.Title = "Create new order";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="../../Scripts/jquery-1.10.2.js" type="text/javascript"></script>
<script type="text/javascript">
    function onOrderTypeChanged() {
        $("#PartnerIds").empty();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetPartners")',

            dataType: 'json',

            data: { type: $("#OrderType").val() },

            success: function(states) {
                $.each(states, function(i, state) {
                    $("#PartnerIds").append('<option value="' + state.Value + '">' +
                        state.Text + '</option>');
                });
                onPartnerChange();
            },
            error: function (ex) {
                alert('Failed to retrieve Partners');
            }
        });
        return false;
    }

    function onPartnerChange() {
        $("#ProductIds").empty();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetProducts")',

            dataType: 'json',

            data: { orderType: $("#OrderType").val(), partnerId: parseInt($("#PartnerIds").val()) },

            success: function(states) {
                $.each(states, function(i, state) {
                    $("#ProductIds").append('<option value="' + state.Value + '">' +
                        state.Text + '</option>');
                });
                onProductChange();
            },
            error: function (ex) {
                alert('Failed to retrieve Products');
            }
        });
        return false;
    }

    function onProductChange() {
        $("#Price").val('');
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetProductPrice")',

            dataType: 'json',

            data: { productId: parseInt($("#ProductIds").val()) },

            success: function (states) {
                $("#Price").val(states);
            },
            error: function (ex) {
                alert('Failed to retrieve Product price');
            }
        });
        return false;
    }

    function addAndSelectEmptyMenuItem(id) {
        $(id).append('<option value="' + 0 + '" selected=' + '"true"' + '"> </option>');
    }

    $(document).ready(function () {
        $("#OrderType").change(onOrderTypeChanged);
        $("#PartnerIds").change(onPartnerChange);
        $("#ProductIds").change(onProductChange);
        //        onProductChange();
        addAndSelectEmptyMenuItem("#PartnerIds");
        addAndSelectEmptyMenuItem("#ProductIds");
        addAndSelectEmptyMenuItem("#OrderType");
        $('#Price').val('');
        $('#Amount').val('');
    });

</script>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProductIds, "Product", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProductIds, null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" >
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PartnerIds, "Partner", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PartnerIds, null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PartnerIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.OrderType, new { @class = "form-control " } )
                @Html.ValidationMessageFor(model => model.OrderType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new {@class = "btn btn-default"})
</div>
